{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","Header","branding","About","NotFound","Test","title","body","fetch","then","response","json","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bd419c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios'   // npm i axios in the terminal\n\nconst Context = React.createContext();\n\n// takes two parameters state and action\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      }\n    case 'ADD_CONTACT':\n      return {\n        // we are going to update the state by adding the new contact\n        // we want the initial state, so we're using the spread operator\n        // payload has the entire contact, we're going to add that at the current contacts in our state using the spread operator, and that will add the new contact\n        ...state,\n        contacts: [action.payload, ...state.contacts]\n      }\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map(\n          contact => contact.id === action.payload.id ? (contact = action.payload) : contact\n        )\n      }\n    default:\n      return state;\n  }\n}\n\nexport class Provider extends Component {\n  // This is basically our global state\n  state = {\n    contacts: [],\n\n    // we need a way to call an action so we need dispatch in our state\n    // dispatch will take in an action\n    dispatch: action => {\n      this.setState(state => reducer(state, action))\n    }\n  };\n\n  async componentDidMount() {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users')\n    this.setState({contacts: res.data});\n  }\n\n  render() {\n    return (\n      // The value is the property, and we pass in the entire state\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\n// it can also access the state\nexport const Consumer = Context.Consumer;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Consumer} from '../../context';\nimport axios from 'axios';  //npm i axios\nimport { Link } from 'react-router-dom';\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false,\n  };\n\n  onDeleteClick = async (id, dispatch) => {\n    // making a delete request\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n    }\n    finally {\n      // calling our dispatch to delete\n      dispatch({type: 'DELETE_CONTACT', payload: id})\n    }\n  };\n\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n\n    return (\n      // we need Consumer to access the stuff from the context\n      <Consumer>\n        {value => {\n          const {dispatch} = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name}{\" \"}\n                <i\n                  onClick={() =>\n                    this.setState({ showContactInfo: !this.state.showContactInfo })\n                  }\n                  className=\"fas fa-sort-down\"\n                  style={{ cursor: \"pointer\" }}\n                />\n                <i\n                  className=\"fas fa-trash-alt\"\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                />\n                <Link to={`contact/edit/${id}`}> \n                <i \n                className=\"fas fa-pen\"\n                style={{\n                  cursor: 'pointer',\n                  float: 'right',\n                  color: 'black',\n                  marginRight: '1rem'\n                }}\n                >\n                </i>\n                </Link>\n\n              </h4>\n              {showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Email: {email}</li>\n                  <li className=\"list-group-item\">Phone: {phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          )\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n  //   name: PropTypes.string.isRequired,\n  //   email: PropTypes.string.isRequired,\n  //   phone: PropTypes.string.isRequired,\n};\nexport default Contact;\n","import React, { Component } from 'react'\nimport Contact from './Contact'\nimport { Consumer } from '../../context'\n\nclass Contacts extends Component {\n\n  render () {\n    return (\n      <Consumer>\n        {value => {\n           const {contacts} = value\n           return (\n             <React.Fragment>\n               <h1 className='display-4 mb-2'><span className='text-danger'>Contact</span> List</h1>\n               {contacts.map((contact) => (\n                  <Contact key={contact.id} contact={contact} />\n                ))}\n             </React.Fragment>\n           )\n         }}\n      </Consumer>\n    )\n  }\n}\n\nexport default Contacts\n","// This is going to be a stateless functional component and this is going to take in property like name, type, onChange, etc.\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames' // npm i classnames in the terminal\n\nconst TextInputGroup = ({label, name, value, placeholder, type, onChange, error}) => {\n  return (\n    <div className='form-group'>\n      <label htmlFor={name}>\n        {label}\n      </label>\n      <input\n        type={type}\n        name={name}\n        className={classnames('form-control form-control-lg', {\n                     'is-invalid': error\n                   })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange} />\n      {error && <div className='invalid-feedback'>\n                  {error}\n                </div>}\n    </div>\n  )\n}\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string\n}\n\nTextInputGroup.defaultProps = {\n  type: 'text'\n}\n\nexport default TextInputGroup\n","import React, { Component } from 'react';\nimport {Consumer} from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\n// import { v4 as uuid } from 'uuid';  // npm i uuid in the terminal to generate unique id\nimport axios from 'axios';  // npm i axios\n\nclass AddContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n\n    // When we submit a form, we don't want to submit it to a file, so we're using regular javacript e.preventDefault();\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        // we want the values from the state, so we're destructing the state\n        const { name, email, phone } = this.state;\n\n        // Check for Errors\n        if (name === '') {\n            this.setState({errors: {name: 'Name is required'}});\n            return;\n        }\n\n        if (email === ''){\n            this.setState({errors: {email: 'Email is required'}});\n            return;\n        }\n\n        if (phone === ''){\n            this.setState({errors: {phone: 'Phone number is required'}});\n            return;\n        }\n\n        // constructing a new contact\n        const newContact = {\n            // here, if the key and value are the same, for example, name: name, we don't have to write the value\n            name,\n            email,\n            phone\n        }\n\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\n        \n        // we're calling the dispatch method and we're going to send the type ADD_CONTACT which is going to trigger ADD_CONTACT case inside the context.js\n        dispatch({ type: 'ADD_CONTACT', payload: res.data })\n        \n\n        // clear the state\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        // redirects to the home page\n        this.props.history.push('/');\n    };\n\n    // e.target.name comes from whatever input name we have, and the value comes from that input name down below inside the form-group class\n    onChange = e => this.setState({ [e.target.name ]: e.target.value });\n    render () {\n        const { name, email, phone, errors } = this.state;\n\n        return (\n            <Consumer>\n                {/* this value gets the entire state */}\n                {value => {\n                    // Now, we have access to the dispatch which will allow us to call that Add Contact\n                    const { dispatch } = value;\n                    return (\n                        <div>\n                            <div className=\"card mb-3\">\n                                <div className=\"card-header\">Add Contact</div>\n                                <div className=\"card-body\">\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                        <TextInputGroup \n                                        label=\"Name\"\n                                        name=\"name\"\n                                        placeholder=\"Enter Name\"\n                                        value={name}\n                                        onChange={this.onChange}\n                                        error={errors.name}\n                                        />\n                                        <TextInputGroup \n                                        label=\"Email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Enter Email\"\n                                        value={email}\n                                        onChange={this.onChange}\n                                        error={errors.email}\n                                        />\n                                        <TextInputGroup \n                                        label=\"Phone\"\n                                        name=\"phone\"\n                                        placeholder=\"Enter Phone\"\n                                        value={phone}\n                                        onChange={this.onChange}\n                                        error={errors.phone}\n                                        />\n                                        <input \n                                        type=\"submit\"\n                                        value=\"Add Contact\"\n                                        className=\"btn btn-light btn-block\"/>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default AddContact;\n","import React, { Component } from 'react';\nimport {Consumer} from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\n// import { v4 as uuid } from 'uuid';  // npm i uuid in the terminal to generate unique id\nimport axios from 'axios';  // npm i axios\n\nclass EditContact extends Component {\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    };\n\n    async componentDidMount() {\n        const { id } = this.props.match.params;\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n\n        const contact = res.data;\n        this.setState({\n            name: contact.name,\n            email: contact.email,\n            phone: contact.phone\n        });\n    }\n\n    // When we submit a form, we don't want to submit it to a file, so we're using regular javacript e.preventDefault();\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        // we want the values from the state, so we're destructing the state\n        const { name, email, phone } = this.state;\n\n        // Check for Errors\n        if (name === '') {\n            this.setState({errors: {name: 'Name is required'}});\n            return;\n        }\n\n        if (email === ''){\n            this.setState({errors: {email: 'Email is required'}});\n            return;\n        }\n\n        if (phone === ''){\n            this.setState({errors: {phone: 'Phone number is required'}});\n            return;\n        }\n\n        const updContact = {\n            name,\n            email,\n            phone\n        }\n\n        // this will get the id\n        const { id } = this.props.match.params;\n\n        // put request is to update, and we need to send along data called updContact to update\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\n\n        // dispatch the action of type 'UPDATE_CONTACT' and payload \n        dispatch({type: 'UPDATE_CONTACT', payload: res.data});\n\n        // clear the state\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n\n        // redirects to the home page\n        this.props.history.push('/');\n    };\n\n    // e.target.name comes from whatever input name we have, and the value comes from that input name down below inside the form-group class\n    onChange = e => this.setState({ [e.target.name ]: e.target.value });\n    render () {\n        const { name, email, phone, errors } = this.state;\n\n        return (\n            <Consumer>\n                {/* this value gets the entire state */}\n                {value => {\n                    // Now, we have access to the dispatch which will allow us to call that Add Contact\n                    const { dispatch } = value;\n                    return (\n                        <div>\n                            <div className=\"card mb-3\">\n                                <div className=\"card-header\">Edit Contact</div>\n                                <div className=\"card-body\">\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                        <TextInputGroup \n                                        label=\"Name\"\n                                        name=\"name\"\n                                        placeholder=\"Enter Name\"\n                                        value={name}\n                                        onChange={this.onChange}\n                                        error={errors.name}\n                                        />\n                                        <TextInputGroup \n                                        label=\"Email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Enter Email\"\n                                        value={email}\n                                        onChange={this.onChange}\n                                        error={errors.email}\n                                        />\n                                        <TextInputGroup \n                                        label=\"Phone\"\n                                        name=\"phone\"\n                                        placeholder=\"Enter Phone\"\n                                        value={phone}\n                                        onChange={this.onChange}\n                                        error={errors.phone}\n                                        />\n                                        <input \n                                        type=\"submit\"\n                                        value=\"Update Contact\"\n                                        className=\"btn btn-light btn-block\"/>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nexport default EditContact;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom' // npm i react-router-dom\n\nconst Header = (props) => {\n  const { branding } = props\n  return (\n    <nav className='navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0'>\n      <div className='container'>\n        <Link to='/' className='navbar-brand'>\n        {branding}\n        </Link>\n        <div>\n          <ul className='navbar-nav mr-auto'>\n            <li className='nav-item active'>\n              <Link to='/' className='nav-link'>\n              <i className='fas fa-home-heart' /> Home\n              </Link>\n            </li>\n            <li className='nav-item active'>\n              <Link to='/contact/add' className='nav-link'>\n              <i className='fas fa-plus-circle' /> Add\n              </Link>\n            </li>\n            <li className='nav-item active'>\n              <Link to='/about' className='nav-link'>\n              <i className='fas fa-question' /> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nHeader.propTypes = {\n  // Here, we have one property 'branding' of object Proptypes of type string is required for this file\n  branding: PropTypes.string.isRequired\n}\n\nexport default Header\n","import React from 'react'\n\nconst About = () => {\n  return (\n    <div>\n      <h1 className='display-4'>About Contact Manager</h1>\n      <p className='lead'>\n        Simple app to manage contacts\n      </p>\n      <p className='text-secondary'>\n        Version 1.0.0\n      </p>\n    </div>\n  )\n}\n\nexport default About\n","import React from 'react'\n\nconst NotFound = () => {\n  return (\n    <div>\n      <h1 className='display-4'><span className='text-danger'>404</span> Page Not Found</h1>\n      <p className='lead'>\n        Sorry, that page does not exist\n      </p>\n    </div>\n  )\n}\n\nexport default NotFound\n","// These are just the React lifecycle methods and we're not going to use it for the contactmanager project\n\nimport React, { Component } from 'react'\n\nclass Test extends Component {\n    state = {\n        title: '',\n        body: ''\n    };\n\n  // it fires whatever you put in that function is going to fire off after the component mounts\n  // And, we don't need to use arrow function in here because it is an actual lifecycle method\n  componentDidMount () {\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n        .then(response => response.json())\n        // writing data instead of json\n        .then(data => this.setState({\n            title: data.title,\n            body: data.body\n        }));\n  }\n\n  // this run before it mounts\n//   componentWillMount () {\n//     console.log('componentWillMount...')\n//   }\n\n//   // this is going to run when the component updates\n//   componentDidUpdate () {\n//     console.log('componentDidUpdate...')\n//   }\n\n//   componentWillUpdate () {\n//     console.log('componentWillUpdate...')\n//   }\n\n//   // when your component receives new properties, this method will run\n//   // although this method is deprecated now\n//   componentWillReceiveProps (nextProps, nextState) {\n//     console.log('componentWillReceiveProps...')\n//   }\n\n//   static getDerivedStateFromProps (nextProps, prevState) {\n//       // you either have to return null or state, you cannot do setState()\n//     return {\n//         test: 'something'\n//     };\n//   }\n\n//   getSnapshotBeforeUpdate (prevProps, prevState) {\n//     console.log('getSnapshotBeforeUpdate...')\n//   }\n\n  render () {\n    const { title, body } = this.state;\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    )\n  }\n}\n\nexport default Test\n","import React, { Component } from 'react'\nimport Contacts from './components/contacts/Contacts'\nimport AddContact from './components/contacts/AddContact'\nimport EditContact from './components/contacts/EditContact'\nimport Header from './components/layout/Header'\nimport About from './components/pages/About'\nimport NotFound from './components/pages/NotFound'\nimport Test from './components/test/Test'\n\nimport { Provider } from './context'\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider>\n        <Router basename={process.env.PUBLIC_URL + '/'}>\n          <div className='App'>\n            <Header branding='Contact Manager' />\n            <div className='container'>\n              <Switch>\n                <Route exact path='/' component={Contacts} />\n                <Route exact path='/contact/add' component={AddContact} />\n                <Route exact path='/contact/edit/:id' component={EditContact} />\n                <Route exact path='/about' component={About} />\n                <Route exact path='/test' component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}